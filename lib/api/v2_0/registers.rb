module API
  module V2_0
    class Registers < Grape::API
      resources :registers do

        desc 'get valid code by your email.'
        params do
          requires :email, type: String #, regexp: API::ApiHelpers::EMAIL_REGEXP
          optional :type,  type: String, desc: 'forget_password, default: nil'
        end
        get 'valid_code' do
          error_403!(detail: 'Mailbox Format error') unless params[:email].match(API::ApiHelpers::EMAIL_REGEXP)

          email = params[:email]
          kol   = Kol.find_by(email: email)

          if params[:type] == 'forget_password'
            error_403!(detail: 'The user does not exist') unless kol
          else
            error_403!(detail: 'Mailbox has been registered') if kol
          end

          valid_code = $redis.get("valid_#{email}")

          unless valid_code
            valid_code = SecureRandom.random_number(1000000)
            $redis.setex("valid_#{email}", 6000, valid_code)
          end

          NewMemberWorker.perform_async(email, valid_code)

          present error: 0, alert: 'The verification code has been sent to your mailbox, please verify it within 10 minutes, please re-obtain the expiration'
        end

        desc 'email valid code'
        params do
          requires :email,      type: String
          requires :valid_code, type: String
        end
        post 'valid_email' do
          if $redis.get("valid_#{params[:email]}") == params[:valid_code]

            $redis.del("valid_#{params[:email]}")
            vtoken = SecureRandom.base64
            
            $redis.setex("vtoken_#{params[:email]}", 6000, vtoken)

            present error: 0, alert: 'Mailbox Validation Succeeded',vtoken: vtoken
          else
            error_403!(detail: 'Mailbox validation Error') 
          end
        end

        desc 'create new kol'
        params do
          requires :name,           type: String
          requires :email,          type: String
          requires :password,       type: String
          requires :vtoken,         type: String, desc: 'vtoken is generated by email valid successfully'
          optional :mobile_number,  type: String
        end
        post '/' do
          error_403!(detail: '出错啦，请联系小萝缤') unless $redis.get("vtoken_#{params[:email]}") == params[:vtoken]

          _kol_hash = {}

          %i(name email password mobile_number).collect{|ele| _kol_hash[ele] = params[ele]}

          kol = Kol.new(_kol_hash)

          if kol.save!
            present :error, 0
            present :kol, kol, with: API::V1::Entities::KolEntities::Summary
          else
            error_403!(detail: kol.errors.join('.'))
          end
        end
        
      end
    end
  end
end
